# -----------------------------------------------------------
# This module rasters/accumulates the spikes generated by spike generation module into
# a lower clock-rate signal.
#
#
#
# (C) Saeid Haghighatshoar
# email: saeid.haghighatshoar@synsense.ai
#
#
# last update: 21.02.2023
# -----------------------------------------------------------

# FIXME:
# (i)   I need to check the clock rate of the data we feed into the SNN core and adjust this in this module.

# - Rockpool imports
from rockpool.nn.modules.module import Module
from rockpool.parameters import Parameter, ParameterBase

# target audio sampling rate
from rockpool.devices.xylo.xylo_a3.xylo_a3_sim.pdm_adc import AUDIO_SAMPLING_RATE

import numpy as np


from typing import Union

P_int = Union[int, ParameterBase]
P_float = Union[float, ParameterBase]
P_array = Union[np.array, ParameterBase]


# list of modules exported
__all__ = ["Raster"]


class Raster(Module):
    def __init__(
        self,
        rate_downsample_factor: int = 2**6,
        max_num_spikes: int = 15,
        fs: float = AUDIO_SAMPLING_RATE,
    ):
        """this class rasters the high clock-rate spikes produced by the spike generation module into a signal
        with a lower clock rate.

        Args:
            rate_downsample (int, optional): How much the spike rate is going to be reduced. Defaults to 2**6 (i.e. moving from around 50K down to around 800)
            max_num_spikes (int, optional): Maximum number of spikes transferred to the core SNN. Defaults to 15.
            fs (float, optional): clock rate of the input spikes. Defaults to AUDIO_SAMPLING_RATE (around 48K ~ 50K).

        """
        self.rate_downsample_factor: P_int = Parameter(rate_downsample_factor)
        self.max_num_spikes: P_int = Parameter(max_num_spikes)
        self.fs: P_float = Parameter(fs)

    def evolve(self, spikes_in: np.ndarray) -> np.ndarray:
        """this modules rasters the input spikes into a signal with lower clock rate.

        Args:
            spikes_in (np.ndarray): `T x num_channel` input spikes received from spike generation module.

        Returns:
            np.ndarray: rastered spikes.
        """
        # check the dimension
        if spikes_in.ndim == 1:
            spikes_in = spikes_in.reshape(-1, 1)

        # accumulate the spikes
        acc_spikes_in = np.cumsum(spikes_in, axis=0)

        # index set to sample the accumulated spikes
        if spikes_in.shape[0] % self.rate_downsample_factor == 0:
            index_set = np.arange(
                self.rate_downsample_factor - 1,
                spikes_in.shape[0],
                step=self.rate_downsample_factor,
            )
        else:
            index_set = np.concatenate(
                [
                    np.arange(
                        self.rate_downsample_factor - 1,
                        spikes_in.shape[0],
                        step=self.rate_downsample_factor,
                    ),
                    [spikes_in.shape[0] - 1],
                ]
            )

        rastered_spikes = acc_spikes_in[index_set, :]

        # compute the accumulated spikes within the samping period
        rastered_spikes[1:, :] -= rastered_spikes[:-1, :]

        # truncate the number of spikes
        rastered_spikes[rastered_spikes > self.max_num_spikes] = self.max_num_spikes

        # reshape the spikes in case the signal has single channel
        rastered_spikes = rastered_spikes.squeeze()

        return rastered_spikes

    def __call__(self, *args, **kwargs) -> np.ndarray:
        """This is the same as `evolve` function.

        Returns:
            np.ndarray: rastered spikes.
        """
        return self.evolve(*args, **kwargs)

    def __repr__(self) -> str:
        string = (
            "This module rasters/accumulates the spikes received from spike generation module into a lower clock-rate signal.\n"
            + "parameters:\n"
            + f"clock rate downsampling factor: {self.rate_downsample_factor}\n"
            + f"maximum number of spikes within a raster period/interval: {self.max_num_spikes}\n"
        )
        return string
